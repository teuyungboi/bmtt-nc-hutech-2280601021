from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Util.Padding import pad, unpad
import socket
import threading

# Kh·ªüi t·∫°o client socket v√† k·∫øt n·ªëi ƒë·∫øn server
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect(('localhost', 12345))

# T·∫°o c·∫∑p kh√≥a RSA cho client
client_key = RSA.generate(2048)

# Nh·∫≠n kh√≥a c√¥ng khai c·ªßa server
server_public_key = RSA.import_key(client_socket.recv(2048))

# G·ª≠i kh√≥a c√¥ng khai c·ªßa client ƒë·∫øn server
client_socket.send(client_key.publickey().exportKey(format='PEM'))

# Nh·∫≠n kh√≥a AES ƒë√£ m√£ h√≥a t·ª´ server
encrypted_aes_key = client_socket.recv(256)  # ƒê·ªçc ƒë√∫ng k√≠ch th∆∞·ªõc RSA block

# Gi·∫£i m√£ kh√≥a AES b·∫±ng kh√≥a private c·ªßa client
cipher_rsa = PKCS1_OAEP.new(client_key)
aes_key = cipher_rsa.decrypt(encrypted_aes_key)

# H√†m m√£ h√≥a tin nh·∫Øn b·∫±ng AES
def encrypt_message(key, message):
    cipher = AES.new(key, AES.MODE_CBC)
    ciphertext = cipher.encrypt(pad(message.encode(), AES.block_size))
    return cipher.iv + ciphertext

# H√†m gi·∫£i m√£ tin nh·∫Øn AES
def decrypt_message(key, encrypted_message):
    try:
        iv = encrypted_message[:AES.block_size]
        ciphertext = encrypted_message[AES.block_size:]
        cipher = AES.new(key, AES.MODE_CBC, iv)
        decrypted_message = unpad(cipher.decrypt(ciphertext), AES.block_size)
        return decrypted_message.decode()
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói gi·∫£i m√£: {e}")
        return None

# H√†m nh·∫≠n tin nh·∫Øn t·ª´ server
def receive_messages():
    while True:
        try:
            encrypted_message = client_socket.recv(1024)
            if not encrypted_message:
                break  # N·∫øu m·∫•t k·∫øt n·ªëi th√¨ tho√°t
            decrypted_message = decrypt_message(aes_key, encrypted_message)
            if decrypted_message:
                print("üì© Tin nh·∫Øn nh·∫≠n ƒë∆∞·ª£c:", decrypted_message)
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi nh·∫≠n tin nh·∫Øn: {e}")
            break

# Kh·ªüi ƒë·ªông lu·ªìng nh·∫≠n tin nh·∫Øn
receive_thread = threading.Thread(target=receive_messages, daemon=True)
receive_thread.start()

# V√≤ng l·∫∑p g·ª≠i tin nh·∫Øn
while True:
    try:
        message = input("‚úâÔ∏è Nh·∫≠p tin nh·∫Øn ('exit' ƒë·ªÉ tho√°t): ")
        encrypted_message = encrypt_message(aes_key, message)
        client_socket.send(encrypted_message)

        if message.lower() == "exit":
            break  # Tho√°t v√≤ng l·∫∑p n·∫øu nh·∫≠p 'exit'

    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi g·ª≠i tin nh·∫Øn: {e}")
        break

# ƒê√≥ng k·∫øt n·ªëi khi tho√°t
client_socket.close()
print("‚ùå ƒê√£ ƒë√≥ng k·∫øt n·ªëi.")